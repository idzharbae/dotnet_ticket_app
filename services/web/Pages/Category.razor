@page "/category"

@inject IJSRuntime JSRuntime
@using StateManagement
@inject JwtState JwtState
@using web.Data
@using TicketGrpc=TicketApp.Internal.Delivery.Grpc
@inject TicketService TicketService
@inject NavigationManager NavigationManager

<h1>Categories</h1>

<div class="row">
    <EditForm Model=@category OnValidSubmit=@ValidFormSubmitted  OnInvalidSubmit=@InvalidFormSubmitted>
        <div>
            <div class="form-label-group">
            <InputText type="text" id="inputName" class="form-control" placeholder="Category Name" 
                @bind-Value=category.Name/>
            <label for="inputName">Category Name</label>
            </div>

            <button class="btn btn-lg btn-primary btn-block text-uppercase" type="submit">Add Category</button>
        </div>
    </EditForm>
</div>

<div class="modal @createdModal.ModalClass" tabindex="-1" role="dialog" style="display:@createdModal.ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Added Category</h5>
                <button type="button" class="ModalClose" data-dismiss="modal" aria-label="ModalClose">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Created category: @createdModal.Name</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ModalCreatedClose()">ModalClose</button>
            </div>
        </div>
    </div>
</div>
<div class="modal @deletedModal.ModalClass" tabindex="-1" role="dialog" style="display:@deletedModal.ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Deleted Category</h5>
                <button type="button" class="ModalClose" data-dismiss="modal" aria-label="ModalClose">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Deleted category: @deletedModal.Name</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ModalDeletedClose()">ModalClose</button>
            </div>
        </div>
    </div>
</div>
<div class="modal @updatedModal.ModalClass" tabindex="-1" role="dialog" style="display:@updatedModal.ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Updated Category</h5>
                <button type="button" class="ModalClose" data-dismiss="modal" aria-label="ModalClose">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Updated category: @updatedModal.Name</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => ModalUpdatedClose()">ModalClose</button>
            </div>
        </div>
    </div>
</div>


@if (categoryList.categories != null && categoryList.categories.Length >0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Created At</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in categoryList.categories) {            
            <tr>
                <td>@c.Id</td>
                <td><EditForm Model=@c OnValidSubmit="() => UpdateCategory(c)">
                    <InputText type="text" class="form-control" placeholder="Category Name" 
                @bind-Value=c.Name /></EditForm></td>
                <td>@c.CreatedAt</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => DeleteCategory(c.Id, c.Name)" >delete</button>
                    <button class="btn btn-secondary" @onclick="() => UpdateCategory(c)" >update</button>
                </td>
            </tr>
            }
        </tbody>
    </table>
} else {
    <h1>Data empty</h1>
}

@code {
    web.Data.Category category = new web.Data.Category();
    CategoryList categoryList;
    CategoryModal createdModal = new CategoryModal();
    CategoryModal updatedModal = new CategoryModal();
    CategoryModal deletedModal = new CategoryModal();
    long totalTickets;
    protected override void OnInitialized() {
        if(string.IsNullOrEmpty(JwtState.Jwt))
            NavigationManager.NavigateTo("login");
        FetchCategories();
    }
    void ValidFormSubmitted() {
        var result = TicketService.CreateCategory(new TicketGrpc.Category{
            Name = category.Name
        }, JwtState.Jwt);
        FetchCategories();
        ModalCreatedOpen();
    }
    void InvalidFormSubmitted(EditContext editContext) {
        
    }
    void FetchCategories() {
        categoryList = TicketService.ListCategory(new TicketGrpc.ListCategoryReq{
            Page = 1,
            Limit = 10
        });
    }

    void DeleteCategory(string categoryId, string categoryName) {
        TicketService.DeleteCategory(categoryId, JwtState.Jwt);
        FetchCategories();
        ModalDeletedOpen(categoryName);
    }
    public void ModalCreatedOpen() {
        createdModal.Open(category.Name);
        StateHasChanged();
    }

    public void ModalCreatedClose() {
        createdModal.Close();
        StateHasChanged();
    }
    public void ModalDeletedOpen(string categoryName) {
        deletedModal.Open(categoryName);
        StateHasChanged();
    }

    public void ModalDeletedClose() {
        deletedModal.Close();
        StateHasChanged();
    }
    public void ModalUpdatedOpen(string categoryName) {
        updatedModal.Open(categoryName);
        StateHasChanged();
    }

    public void ModalUpdatedClose() {
        updatedModal.Close();
        StateHasChanged();
    }
    public void UpdateCategory(web.Data.Category category) {
        TicketService.UpdateCategory(new TicketGrpc.Category{
            Id = category.Id,
            Name = category.Name
        }, JwtState.Jwt);
        FetchCategories();
        ModalUpdatedOpen(category.Name);
    }
}
