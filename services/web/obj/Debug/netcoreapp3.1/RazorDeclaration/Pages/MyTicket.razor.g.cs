#pragma checksum "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/Pages/MyTicket.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eae2fa7e2e0209f03a836fcd89f9eafc50a1f9b9"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace web.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/_Imports.razor"
using web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/Pages/MyTicket.razor"
using StateManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/Pages/MyTicket.razor"
using web.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/Pages/MyTicket.razor"
using TicketGrpc=TicketApp.Internal.Delivery.Grpc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/Pages/MyTicket.razor"
using Grpc.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/Pages/MyTicket.razor"
using web.Data.ComponentEntities;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/myticket")]
    public partial class MyTicket : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 163 "/home/idzhar/Documents/jobseek/xtremax/ticketing/services/web/Pages/MyTicket.razor"
       
    Modals.TicketModal modal;

    Ticket ticket = new Ticket();
    TicketList ticketList = new TicketList();
    web.Data.Category[] categories;
    long totalTickets;
    int Page = 1;
    int status;
    string search = "";
    TicketModal newTicketModal = new TicketModal();

    protected override void OnInitialized() {
        if(string.IsNullOrEmpty(JwtState.Jwt))
            NavigationManager.NavigateTo("login");
        categories = TicketService.ListCategory(new TicketGrpc.ListCategoryReq{}).categories;
        FetchData();
    }
    void FetchData() {
        try{
            var user = AuthService.ValidateJwt(JwtState.Jwt);
        
            ticketList = TicketService.List(new TicketGrpc.ListTicketReq{
                Name = search,
                Status = status,
                Page = Page,
                Limit = 10,
                OwnerId = user.Id
            });
        } catch (RpcException e) {
            modal.ModalOpen("Error occured", e.Status.StatusCode+": "+e.Status.Detail);
        } catch(Exception e) {
            modal.ModalOpen("Error occured", e.Message);
        }
    }
    void ValidFormSubmitted() {
        try{
            TicketService.CreateTicket(ticket, JwtState.Jwt);
            ticket = new Ticket();
            modal.ModalOpen("Ticket Created", "Ticket created: "+ticket.Name);
            FetchData();
        } catch (RpcException e) {
            modal.ModalOpen("Error occured", e.Status.StatusCode+": "+e.Status.Detail);
        } catch(Exception e) {
            modal.ModalOpen("Error occured", e.Message);
        }
    }
    public void NewTicketModalOpen() {
        newTicketModal.Open("");
        StateHasChanged();
    }

    public void NewTicketModalClose() {
        newTicketModal.Close();
        StateHasChanged();
    }
    public void DeleteTicket(string ticketId, string ticketName) {
        try{
            TicketService.DeleteTicket(new Ticket{
                Id = ticketId,
                Owner = UserState.user.Id
            }, JwtState.Jwt);
            FetchData();
            modal.ModalOpen("Ticket Deleted", "Ticket deleted: "+ticketName);
        } catch (RpcException e) {
            modal.ModalOpen("Error occured", e.Status.StatusCode+": "+e.Status.Detail);
        } catch(Exception e) {
            modal.ModalOpen("Error occured", e.Message);
        }
    }
    public void UpdateTicket(web.Data.Ticket ticket) {
        try{
            ticket.Owner = UserState.user.Id;
            TicketService.UpdateTicket(ticket, JwtState.Jwt);
            modal.ModalOpen("Ticket Updated", "Ticket updated: "+ticket.Name);
            FetchData();
        } catch (RpcException e) {
            modal.ModalOpen("Error occured", e.Status.StatusCode+": "+e.Status.Detail);
        } catch(Exception e) {
            modal.ModalOpen("Error occured", e.Message);
        }
    }
    void FilterStatus(ChangeEventArgs e) {
        status = int.Parse(e.Value.ToString());
        FetchData();
    }
    void SearchTicket(ChangeEventArgs e) {
        search = e.Value.ToString();
        FetchData();
    }
    void BindStatus(Ticket t, ChangeEventArgs e) {
        t.Status = int.Parse(e.Value.ToString());
    }
    void BindCategory(Ticket t, ChangeEventArgs e) {
        t.Category = e.Value.ToString();
    }
    void SwitchPage(int newPage) {
        Page = newPage;
        FetchData();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TicketService TicketService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthService AuthService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserState UserState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private JwtState JwtState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
