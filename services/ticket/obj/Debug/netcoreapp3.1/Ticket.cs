// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/ticket.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TicketApp.Internal.Delivery.Grpc {

  /// <summary>Holder for reflection information generated from protos/ticket.proto</summary>
  public static partial class TicketReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/ticket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TicketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwcm90b3MvdGlja2V0LnByb3RvEgtUaWNrZXRQcm90byKqAQoGVGlja2V0",
            "EgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyAB",
            "KAkSEgoKYXNpZ25lZV9pZBgEIAEoCRIQCghvd25lcl9pZBgFIAEoCRITCgtj",
            "YXRlZ29yeV9pZBgGIAEoCRIOCgZzdGF0dXMYByABKAUSEgoKY3JlYXRlZF9h",
            "dBgIIAEoAxISCgp1cGRhdGVkX2F0GAkgASgDIoUBCg1MaXN0VGlja2V0UmVx",
            "EhIKCmFzaWduZWVfaWQYASABKAkSEAoIb3duZXJfaWQYAiABKAkSEwoLY2F0",
            "ZWdvcnlfaWQYAyABKAkSDgoGc3RhdHVzGAQgASgFEgwKBHBhZ2UYBSABKAUS",
            "DQoFbGltaXQYBiABKAUSDAoEbmFtZRgHIAEoCSJNCg5MaXN0VGlja2V0UmVz",
            "cBIkCgd0aWNrZXRzGAEgAygLMhMuVGlja2V0UHJvdG8uVGlja2V0EhUKDXRv",
            "dGFsX3Jlc3VsdHMYAiABKAMiTAoIQ2F0ZWdvcnkSCgoCaWQYASABKAkSDAoE",
            "bmFtZRgCIAEoCRISCgpjcmVhdGVkX2F0GAMgASgDEhIKCnVwZGF0ZWRfYXQY",
            "BCABKAMiLgoPTGlzdENhdGVnb3J5UmVxEgwKBHBhZ2UYASABKAUSDQoFbGlt",
            "aXQYAiABKAUiVAoQTGlzdENhdGVnb3J5UmVzcBIpCgpjYXRlZ29yaWVzGAEg",
            "AygLMhUuVGlja2V0UHJvdG8uQ2F0ZWdvcnkSFQoNdG90YWxfcmVzdWx0cxgC",
            "IAEoAyIaCgdTdWNjZXNzEg8KB3N1Y2Nlc3MYASABKAgygwYKClRpY2tldEdy",
            "cGMSNQoJR2V0VGlja2V0EhMuVGlja2V0UHJvdG8uVGlja2V0GhMuVGlja2V0",
            "UHJvdG8uVGlja2V0EkUKCkxpc3RUaWNrZXQSGi5UaWNrZXRQcm90by5MaXN0",
            "VGlja2V0UmVxGhsuVGlja2V0UHJvdG8uTGlzdFRpY2tldFJlc3ASOAoMQ3Jl",
            "YXRlVGlja2V0EhMuVGlja2V0UHJvdG8uVGlja2V0GhMuVGlja2V0UHJvdG8u",
            "VGlja2V0EjgKDFVwZGF0ZVRpY2tldBITLlRpY2tldFByb3RvLlRpY2tldBoT",
            "LlRpY2tldFByb3RvLlRpY2tldBI/ChNVcGRhdGVUaWNrZXRBc2lnbmVlEhMu",
            "VGlja2V0UHJvdG8uVGlja2V0GhMuVGlja2V0UHJvdG8uVGlja2V0Ej4KElVw",
            "ZGF0ZVRpY2tldFN0YXR1cxITLlRpY2tldFByb3RvLlRpY2tldBoTLlRpY2tl",
            "dFByb3RvLlRpY2tldBI5CgxEZWxldGVUaWNrZXQSEy5UaWNrZXRQcm90by5U",
            "aWNrZXQaFC5UaWNrZXRQcm90by5TdWNjZXNzEjsKC0dldENhdGVnb3J5EhUu",
            "VGlja2V0UHJvdG8uQ2F0ZWdvcnkaFS5UaWNrZXRQcm90by5DYXRlZ29yeRJL",
            "CgxMaXN0Q2F0ZWdvcnkSHC5UaWNrZXRQcm90by5MaXN0Q2F0ZWdvcnlSZXEa",
            "HS5UaWNrZXRQcm90by5MaXN0Q2F0ZWdvcnlSZXNwEj4KDkNyZWF0ZUNhdGVn",
            "b3J5EhUuVGlja2V0UHJvdG8uQ2F0ZWdvcnkaFS5UaWNrZXRQcm90by5DYXRl",
            "Z29yeRI+Cg5VcGRhdGVDYXRlZ29yeRIVLlRpY2tldFByb3RvLkNhdGVnb3J5",
            "GhUuVGlja2V0UHJvdG8uQ2F0ZWdvcnkSPQoORGVsZXRlQ2F0ZWdvcnkSFS5U",
            "aWNrZXRQcm90by5DYXRlZ29yeRoULlRpY2tldFByb3RvLlN1Y2Nlc3NCI6oC",
            "IFRpY2tldEFwcC5JbnRlcm5hbC5EZWxpdmVyeS5HcnBjYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TicketApp.Internal.Delivery.Grpc.Ticket), global::TicketApp.Internal.Delivery.Grpc.Ticket.Parser, new[]{ "Id", "Name", "Description", "AsigneeId", "OwnerId", "CategoryId", "Status", "CreatedAt", "UpdatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TicketApp.Internal.Delivery.Grpc.ListTicketReq), global::TicketApp.Internal.Delivery.Grpc.ListTicketReq.Parser, new[]{ "AsigneeId", "OwnerId", "CategoryId", "Status", "Page", "Limit", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TicketApp.Internal.Delivery.Grpc.ListTicketResp), global::TicketApp.Internal.Delivery.Grpc.ListTicketResp.Parser, new[]{ "Tickets", "TotalResults" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TicketApp.Internal.Delivery.Grpc.Category), global::TicketApp.Internal.Delivery.Grpc.Category.Parser, new[]{ "Id", "Name", "CreatedAt", "UpdatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TicketApp.Internal.Delivery.Grpc.ListCategoryReq), global::TicketApp.Internal.Delivery.Grpc.ListCategoryReq.Parser, new[]{ "Page", "Limit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TicketApp.Internal.Delivery.Grpc.ListCategoryResp), global::TicketApp.Internal.Delivery.Grpc.ListCategoryResp.Parser, new[]{ "Categories", "TotalResults" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TicketApp.Internal.Delivery.Grpc.Success), global::TicketApp.Internal.Delivery.Grpc.Success.Parser, new[]{ "Success_" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ticket : pb::IMessage<Ticket> {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TicketApp.Internal.Delivery.Grpc.TicketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      asigneeId_ = other.asigneeId_;
      ownerId_ = other.ownerId_;
      categoryId_ = other.categoryId_;
      status_ = other.status_;
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asignee_id" field.</summary>
    public const int AsigneeIdFieldNumber = 4;
    private string asigneeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AsigneeId {
      get { return asigneeId_; }
      set {
        asigneeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 5;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category_id" field.</summary>
    public const int CategoryIdFieldNumber = 6;
    private string categoryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 8;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 9;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (AsigneeId != other.AsigneeId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (CategoryId != other.CategoryId) return false;
      if (Status != other.Status) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AsigneeId.Length != 0) hash ^= AsigneeId.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (CategoryId.Length != 0) hash ^= CategoryId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (AsigneeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AsigneeId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OwnerId);
      }
      if (CategoryId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CategoryId);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Status);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AsigneeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AsigneeId);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (CategoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AsigneeId.Length != 0) {
        AsigneeId = other.AsigneeId;
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.CategoryId.Length != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            AsigneeId = input.ReadString();
            break;
          }
          case 42: {
            OwnerId = input.ReadString();
            break;
          }
          case 50: {
            CategoryId = input.ReadString();
            break;
          }
          case 56: {
            Status = input.ReadInt32();
            break;
          }
          case 64: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 72: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListTicketReq : pb::IMessage<ListTicketReq> {
    private static readonly pb::MessageParser<ListTicketReq> _parser = new pb::MessageParser<ListTicketReq>(() => new ListTicketReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTicketReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TicketApp.Internal.Delivery.Grpc.TicketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketReq(ListTicketReq other) : this() {
      asigneeId_ = other.asigneeId_;
      ownerId_ = other.ownerId_;
      categoryId_ = other.categoryId_;
      status_ = other.status_;
      page_ = other.page_;
      limit_ = other.limit_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketReq Clone() {
      return new ListTicketReq(this);
    }

    /// <summary>Field number for the "asignee_id" field.</summary>
    public const int AsigneeIdFieldNumber = 1;
    private string asigneeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AsigneeId {
      get { return asigneeId_; }
      set {
        asigneeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category_id" field.</summary>
    public const int CategoryIdFieldNumber = 3;
    private string categoryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 5;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTicketReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTicketReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AsigneeId != other.AsigneeId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (CategoryId != other.CategoryId) return false;
      if (Status != other.Status) return false;
      if (Page != other.Page) return false;
      if (Limit != other.Limit) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AsigneeId.Length != 0) hash ^= AsigneeId.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (CategoryId.Length != 0) hash ^= CategoryId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AsigneeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AsigneeId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerId);
      }
      if (CategoryId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CategoryId);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Page != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Page);
      }
      if (Limit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Limit);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AsigneeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AsigneeId);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (CategoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTicketReq other) {
      if (other == null) {
        return;
      }
      if (other.AsigneeId.Length != 0) {
        AsigneeId = other.AsigneeId;
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.CategoryId.Length != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AsigneeId = input.ReadString();
            break;
          }
          case 18: {
            OwnerId = input.ReadString();
            break;
          }
          case 26: {
            CategoryId = input.ReadString();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            Page = input.ReadInt32();
            break;
          }
          case 48: {
            Limit = input.ReadInt32();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListTicketResp : pb::IMessage<ListTicketResp> {
    private static readonly pb::MessageParser<ListTicketResp> _parser = new pb::MessageParser<ListTicketResp>(() => new ListTicketResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTicketResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TicketApp.Internal.Delivery.Grpc.TicketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketResp(ListTicketResp other) : this() {
      tickets_ = other.tickets_.Clone();
      totalResults_ = other.totalResults_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTicketResp Clone() {
      return new ListTicketResp(this);
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int TicketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TicketApp.Internal.Delivery.Grpc.Ticket> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(10, global::TicketApp.Internal.Delivery.Grpc.Ticket.Parser);
    private readonly pbc::RepeatedField<global::TicketApp.Internal.Delivery.Grpc.Ticket> tickets_ = new pbc::RepeatedField<global::TicketApp.Internal.Delivery.Grpc.Ticket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TicketApp.Internal.Delivery.Grpc.Ticket> Tickets {
      get { return tickets_; }
    }

    /// <summary>Field number for the "total_results" field.</summary>
    public const int TotalResultsFieldNumber = 2;
    private long totalResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalResults {
      get { return totalResults_; }
      set {
        totalResults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTicketResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTicketResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tickets_.Equals(other.tickets_)) return false;
      if (TotalResults != other.TotalResults) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tickets_.GetHashCode();
      if (TotalResults != 0L) hash ^= TotalResults.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tickets_.WriteTo(output, _repeated_tickets_codec);
      if (TotalResults != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalResults);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      if (TotalResults != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalResults);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTicketResp other) {
      if (other == null) {
        return;
      }
      tickets_.Add(other.tickets_);
      if (other.TotalResults != 0L) {
        TotalResults = other.TotalResults;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
          case 16: {
            TotalResults = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Category : pb::IMessage<Category> {
    private static readonly pb::MessageParser<Category> _parser = new pb::MessageParser<Category>(() => new Category());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Category> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TicketApp.Internal.Delivery.Grpc.TicketReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Category() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Category(Category other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Category Clone() {
      return new Category(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 4;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Category);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Category other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Category other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 32: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListCategoryReq : pb::IMessage<ListCategoryReq> {
    private static readonly pb::MessageParser<ListCategoryReq> _parser = new pb::MessageParser<ListCategoryReq>(() => new ListCategoryReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCategoryReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TicketApp.Internal.Delivery.Grpc.TicketReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCategoryReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCategoryReq(ListCategoryReq other) : this() {
      page_ = other.page_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCategoryReq Clone() {
      return new ListCategoryReq(this);
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 1;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCategoryReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCategoryReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Page != other.Page) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Page != 0) hash ^= Page.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCategoryReq other) {
      if (other == null) {
        return;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListCategoryResp : pb::IMessage<ListCategoryResp> {
    private static readonly pb::MessageParser<ListCategoryResp> _parser = new pb::MessageParser<ListCategoryResp>(() => new ListCategoryResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCategoryResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TicketApp.Internal.Delivery.Grpc.TicketReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCategoryResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCategoryResp(ListCategoryResp other) : this() {
      categories_ = other.categories_.Clone();
      totalResults_ = other.totalResults_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCategoryResp Clone() {
      return new ListCategoryResp(this);
    }

    /// <summary>Field number for the "categories" field.</summary>
    public const int CategoriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TicketApp.Internal.Delivery.Grpc.Category> _repeated_categories_codec
        = pb::FieldCodec.ForMessage(10, global::TicketApp.Internal.Delivery.Grpc.Category.Parser);
    private readonly pbc::RepeatedField<global::TicketApp.Internal.Delivery.Grpc.Category> categories_ = new pbc::RepeatedField<global::TicketApp.Internal.Delivery.Grpc.Category>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TicketApp.Internal.Delivery.Grpc.Category> Categories {
      get { return categories_; }
    }

    /// <summary>Field number for the "total_results" field.</summary>
    public const int TotalResultsFieldNumber = 2;
    private long totalResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalResults {
      get { return totalResults_; }
      set {
        totalResults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCategoryResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCategoryResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!categories_.Equals(other.categories_)) return false;
      if (TotalResults != other.TotalResults) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= categories_.GetHashCode();
      if (TotalResults != 0L) hash ^= TotalResults.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      categories_.WriteTo(output, _repeated_categories_codec);
      if (TotalResults != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalResults);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += categories_.CalculateSize(_repeated_categories_codec);
      if (TotalResults != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalResults);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCategoryResp other) {
      if (other == null) {
        return;
      }
      categories_.Add(other.categories_);
      if (other.TotalResults != 0L) {
        TotalResults = other.TotalResults;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            categories_.AddEntriesFrom(input, _repeated_categories_codec);
            break;
          }
          case 16: {
            TotalResults = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Success : pb::IMessage<Success> {
    private static readonly pb::MessageParser<Success> _parser = new pb::MessageParser<Success>(() => new Success());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Success> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TicketApp.Internal.Delivery.Grpc.TicketReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Success() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Success(Success other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Success Clone() {
      return new Success(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int Success_FieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success_ {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Success);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Success other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success_ != other.Success_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success_ != false) hash ^= Success_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success_ != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success_ != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Success other) {
      if (other == null) {
        return;
      }
      if (other.Success_ != false) {
        Success_ = other.Success_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success_ = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
